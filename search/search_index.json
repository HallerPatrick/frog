{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Frosch frosch is a library that supports you, as a Python developer, to have a more easier time, while debugging your code.","title":"Home"},{"location":"#welcome-to-frosch","text":"frosch is a library that supports you, as a Python developer, to have a more easier time, while debugging your code.","title":"Welcome to Frosch"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"exception_printing/","text":"Exception Printing You can also easily print your catched exceptions to stdout from frosch import print_exception try : x = [ 0 , 1 ] x [ 3 ] except IndexError as error : print_exception ( error )","title":"Exception Printing"},{"location":"exception_printing/#exception-printing","text":"You can also easily print your catched exceptions to stdout from frosch import print_exception try : x = [ 0 , 1 ] x [ 3 ] except IndexError as error : print_exception ( error )","title":"Exception Printing"},{"location":"getting_started/","text":"Getting Started frosch can be used by installing it with pip : pip install frosch Usage from frosch import hook hook () x = 3 + \"String\" # This is not working! If you dont feel like calling the hook manually, you can just import frosch.activate and the hook is already executed! import frosch.activate x = 3 + \"String\" # This is not working!","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"frosch can be used by installing it with pip : pip install frosch","title":"Getting Started"},{"location":"getting_started/#usage","text":"from frosch import hook hook () x = 3 + \"String\" # This is not working! If you dont feel like calling the hook manually, you can just import frosch.activate and the hook is already executed! import frosch.activate x = 3 + \"String\" # This is not working!","title":"Usage"},{"location":"notifications/","text":"OS Notifications Another utility frosch provides is that when a current running python program crasged to send a OS notifcation to you. Usage from frosch import hook hook ( theme = \"vs\" , # VSCode Theme title = \"I crashed!\" , message = \"Run Number #1444 is also crashing...\" ) This works on MacOS ( osascript ), Linux ( notify-send ) and Windows ( powershell ).","title":"Notifications"},{"location":"notifications/#os-notifications","text":"Another utility frosch provides is that when a current running python program crasged to send a OS notifcation to you.","title":"OS Notifications"},{"location":"notifications/#usage","text":"from frosch import hook hook ( theme = \"vs\" , # VSCode Theme title = \"I crashed!\" , message = \"Run Number #1444 is also crashing...\" ) This works on MacOS ( osascript ), Linux ( notify-send ) and Windows ( powershell ).","title":"Usage"},{"location":"themes/","text":"Themes If you get tired of seeing your frosch output always in the same color theme or it does not fit well with your theming of your terminal, you can switch it with a different color palette or even create your own ones. Following themes can be used directly: Themes abap bw igor native rrt trac algol colorful inkpot paraiso_dark sas vim algol_nu default lovelace paraiso_light solarized vs arduino emacs manni pastie stata_dark xcode autumn friendly monokai perldoc stata_light borland fruity murphy rainbow_dash tango Usage from frosch import hook hook ( theme = \"vim\" ) Custom Themes Custom themes can be created throught the frosch.style API: from frosch import hook from frosch.style import Style from frosch.style.token import Keyword , Name , Comment , String , Error , \\ Number , Operator , Generic class CustomStyle ( Style ): default_style = \"\" styles = { Comment : 'italic #888' , Keyword : 'bold #005' , Name : '#f00' , Name . Function : '#0f0' , Name . Class : 'bold #0f0' , String : 'bg:#eee #111' } hook ( theme = CustomStyle ) In the future the theme can be read from a global config so it does not always has to be written/set in your python projects.","title":"Themes"},{"location":"themes/#themes","text":"If you get tired of seeing your frosch output always in the same color theme or it does not fit well with your theming of your terminal, you can switch it with a different color palette or even create your own ones. Following themes can be used directly: Themes abap bw igor native rrt trac algol colorful inkpot paraiso_dark sas vim algol_nu default lovelace paraiso_light solarized vs arduino emacs manni pastie stata_dark xcode autumn friendly monokai perldoc stata_light borland fruity murphy rainbow_dash tango","title":"Themes"},{"location":"themes/#usage","text":"from frosch import hook hook ( theme = \"vim\" )","title":"Usage"},{"location":"themes/#custom-themes","text":"Custom themes can be created throught the frosch.style API: from frosch import hook from frosch.style import Style from frosch.style.token import Keyword , Name , Comment , String , Error , \\ Number , Operator , Generic class CustomStyle ( Style ): default_style = \"\" styles = { Comment : 'italic #888' , Keyword : 'bold #005' , Name : '#f00' , Name . Function : '#0f0' , Name . Class : 'bold #0f0' , String : 'bg:#eee #111' } hook ( theme = CustomStyle ) In the future the theme can be read from a global config so it does not always has to be written/set in your python projects.","title":"Custom Themes"}]}